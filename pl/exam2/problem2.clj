;==========================================================
; Type your student ID and name here.
;==========================================================

(use 'clojure.test)

;==========================================================
(defn look-and-say
  "Returns the n-th element of the look-and-say sequence
  as a list of digits."
  [n]
  (last (take (inc n)
    (iterate
      (fn [i]
        (->>
          i
          (partition-by identity)
          (map #(vector (first %) (count %)) )
          ; (reduce #(assoc %1 %2 (inc (get %1 %2 0)) ) {})
          (mapcat #(list (second %) (first %)) )
        )
      )
      (list 1)
    )
  ))
)

;==========================================================
(deftest test-look-and-say
  (is (= '(1) (look-and-say 0)))
  (is (= '(1 1) (look-and-say 1)))
  (is (= '(2 1) (look-and-say 2)))
  (is (= '(1 2 1 1) (look-and-say 3)))
  (is (= '(1 1 1 2 2 1) (look-and-say 4)))
  (is (= '(3 1 2 2 1 1) (look-and-say 5)))
  (is (= '(3 1 1 3 1 1 2 2 2 1 1 3 1 1 1 2
            3 1 1 3 3 2 1 1 1 2 1 3 1 2 2 1
            1 2 3 1 1 3 1 1 1 2 3 1 1 2 1 1
            1 3 3 1 1 2 1 1 1 3 1 2 2 1 1 2
            1 3 2 1 1 3 1 2 1 1 1 3 2 2 2 1
            1 2 3 1 1 3 1 1 2 2 2 1 1 3 1 1
            1 2 2 1 2 2 1 1 1 3 1 2 2 1 1 2
            1 3 2 1 1 3 1 2 1 1 1 3 2 2 2 1
            1 2 1 3 2 1 1 3 2 1 3 2 2 1 1 3
            3 1 1 2 1 3 2 1 2 3 2 2 2 1 1 2
            3 1 1 3 1 1 2 2 2 1 1 3 1 1 1 2
            3 1 1 3 2 2 3 1 1 2 1 1 1 3 1 1
            2 2 2 1 1 2 1 3 2 1 1 3 3 1 1 2
            1 3 2 1 1 2 2 1 1 2 1 3 3 2 2 1
            1 2 1 1 1 3 1 2 2 1 1 3 1 2 1 1
            1 3 2 2 2 1 2 3 2 1 1 2 1 1 1 3
            1 2 1 1 1 2 1 3 1 1 1 2 1 3 2 1
            1 2 3 1 1 3 2 1 3 2 2 1 1 2 1 1
            1 3 1 2 2 1 2 3 2 1 1 2 1 1 1 3
            1 2 2 1 1 2 1 3 1 1 1 2 1 3 1 2
            2 1 1 2 1 3 2 1 1 3 2 1 3 2 2 1
            1 2 3 1 1 3 1 1 2 2 2 1 1 3 1 1
            1 2 3 1 1 3 1 1 1 2 1 3 2 1 1 2
            2 1 1 2 1 3 2 2 3 1 1 2 1 1 1 3
            1 2 2 1 1 3 3 2 2 1 1 3 1 1 1 2
            2 1 1 3 1 2 2 1)
         (look-and-say 20))))

;==========================================================
(run-tests)
